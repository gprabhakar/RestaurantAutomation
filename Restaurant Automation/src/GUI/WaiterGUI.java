/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import DatabaseClasses.EmployeeDB;
import DatabaseClasses.OrderDB;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JList;
import javax.swing.SpringLayout;
import Controllers.ControllerGUI;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import Main.Order;
/**
 *
 * @author prabh_000
 */
public class WaiterGUI extends javax.swing.JFrame {

    /**
     * Creates new form WaiterGUI
     */
    int WaiterID;
    String[] tables={};
    int TableID;
    ControllerGUI Cg = new ControllerGUI();
    DefaultListModel<String> AddedItemsModel = new DefaultListModel();
    DefaultListModel<String> OrdersModel = new DefaultListModel();
    Order order=new Order();    
    OrderDB orderdb=new OrderDB();
    int orderid;
    public WaiterGUI()
    {
     initComponents();
      
    }
    public WaiterGUI(int UserID)
    {
     
        initComponents();
        WaiterID=UserID;
        AddedItems.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        SelectedTableTab = new javax.swing.JTabbedPane();
        AddedItems.setModel(AddedItemsModel);
        SelectedTableTab.setVisible(false);
        OrderPanel.setVisible(false);
        getOrderofTable();    
                 
        tables=new EmployeeDB().getTables(UserID);
        final FlowLayout flowLayout=new FlowLayout();
        //this.getContentPane().setLayout(springLayout);
        WaiterPanel.setLayout(flowLayout);
        JButton[] button=new JButton[4];
        for(int i=0;i<tables.length;i++)
        {
            button[i]=new JButton("Table"+tables[i]);
                
            WaiterPanel.add(button[i]);
            final String tableID=(tables[i]);
            button[i].addActionListener(new ActionListener()
                                            {
                                                public void actionPerformed(java.awt.event.ActionEvent evt)
                                                {
                                                    
                                                    
                                                    WaiterTabbedPane.addTab("Table "+tableID, SelectedTableTab);
                                                    //SelectedTableTab.setName("Table "+tableID);
                                                    SelectedTableTab.addTab("OrderTab", OrderPanel);
                                                    
                                                    SelectedTableTab.setVisible(true);
                                                    OrderPanel.setVisible(true);
                                                    WaiterTabbedPane.setSelectedComponent(SelectedTableTab);
                                                    
                                                    TableID=Integer.parseInt(tableID);
                                                    AddedItemsModel.removeAllElements();
                                                    OrdersModel.removeAllElements();
                                                    getOrderofTable();
                                                     //WaiterPanel.setVisible(false);
                                                   
                                                   
                                                    
                                                }});
        } 
    }

    public void getOrderofTable()
    {
         ArrayList<Order> orderList= orderdb.getOrderofTable(WaiterID, TableID);
         for(int i=0;i<orderList.size();i++)
        {
            {
                OrdersModel.addElement("Order "+orderList.get(i).ordID);
            }
        }
        OrdersList.setModel(OrdersModel);
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfirmOrder = new javax.swing.JFrame();
        confirmOrder = new javax.swing.JLabel();
        Yes = new javax.swing.JButton();
        No = new javax.swing.JButton();
        Error = new javax.swing.JFrame();
        errorLabel = new javax.swing.JLabel();
        changeButton = new javax.swing.JButton();
        UpdateOrder = new javax.swing.JFrame();
        jLabel5 = new javax.swing.JLabel();
        Mod = new javax.swing.JButton();
        NoMod = new javax.swing.JButton();
        Greeting = new javax.swing.JLabel();
        Logout = new javax.swing.JButton();
        WaiterTabbedPane = new javax.swing.JTabbedPane();
        WaiterPanel = new javax.swing.JPanel();
        SelectedTableTab = new javax.swing.JTabbedPane();
        OrderPanel = new javax.swing.JPanel();
        CreateOrder = new javax.swing.JButton();
        ModifyOrder = new javax.swing.JButton();
        CancelOrder = new javax.swing.JButton();
        TableIDLabel = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        OrdersList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        DisplayLabel1 = new javax.swing.JLabel();
        MenuPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Category1 = new javax.swing.JButton();
        Category2 = new javax.swing.JButton();
        Category3 = new javax.swing.JButton();
        Category4 = new javax.swing.JButton();
        Category5 = new javax.swing.JButton();
        Back1 = new javax.swing.JButton();
        PlaceOrder = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        AddedItems1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        DisplayLabel = new javax.swing.JLabel();
        Modify = new javax.swing.JButton();
        remove1 = new javax.swing.JButton();
        CategoryItems = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemList = new javax.swing.JList();
        CategoryListLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        remove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        AddedItems = new javax.swing.JList();
        AddItemstoOrder = new javax.swing.JButton();

        ConfirmOrder.setBounds(new java.awt.Rectangle(50, 50, 350, 300));

        confirmOrder.setText("Confirm Order?");

        Yes.setText("Yes");
        Yes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YesActionPerformed(evt);
            }
        });

        No.setText("No");
        No.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ConfirmOrderLayout = new javax.swing.GroupLayout(ConfirmOrder.getContentPane());
        ConfirmOrder.getContentPane().setLayout(ConfirmOrderLayout);
        ConfirmOrderLayout.setHorizontalGroup(
            ConfirmOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfirmOrderLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(ConfirmOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(confirmOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ConfirmOrderLayout.createSequentialGroup()
                        .addComponent(Yes)
                        .addGap(18, 18, 18)
                        .addComponent(No)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        ConfirmOrderLayout.setVerticalGroup(
            ConfirmOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ConfirmOrderLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(confirmOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ConfirmOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Yes)
                    .addComponent(No))
                .addContainerGap(97, Short.MAX_VALUE))
        );

        errorLabel.setText("An Order is already in Queue. Please change the existing order.");

        changeButton.setText("Ok");

        javax.swing.GroupLayout ErrorLayout = new javax.swing.GroupLayout(Error.getContentPane());
        Error.getContentPane().setLayout(ErrorLayout);
        ErrorLayout.setHorizontalGroup(
            ErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ErrorLayout.createSequentialGroup()
                .addGroup(ErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ErrorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                    .addGroup(ErrorLayout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(changeButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ErrorLayout.setVerticalGroup(
            ErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ErrorLayout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(changeButton)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        UpdateOrder.setFocusable(false);
        UpdateOrder.setMinimumSize(new java.awt.Dimension(500, 400));

        jLabel5.setText("Do you want to update order now?");

        Mod.setText("Yes");
        Mod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModActionPerformed(evt);
            }
        });

        NoMod.setLabel("No");
        NoMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoModActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UpdateOrderLayout = new javax.swing.GroupLayout(UpdateOrder.getContentPane());
        UpdateOrder.getContentPane().setLayout(UpdateOrderLayout);
        UpdateOrderLayout.setHorizontalGroup(
            UpdateOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateOrderLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(UpdateOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(UpdateOrderLayout.createSequentialGroup()
                        .addComponent(Mod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NoMod))
                    .addComponent(jLabel5))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        UpdateOrderLayout.setVerticalGroup(
            UpdateOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateOrderLayout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel5)
                .addGap(47, 47, 47)
                .addGroup(UpdateOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Mod)
                    .addComponent(NoMod))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Greeting.setText("Hello Waiter! ");

        Logout.setText("Logout");
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout WaiterPanelLayout = new javax.swing.GroupLayout(WaiterPanel);
        WaiterPanel.setLayout(WaiterPanelLayout);
        WaiterPanelLayout.setHorizontalGroup(
            WaiterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
        );
        WaiterPanelLayout.setVerticalGroup(
            WaiterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );

        WaiterTabbedPane.addTab("TableTab", WaiterPanel);

        CreateOrder.setText("CreateOrder");
        CreateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateOrderActionPerformed(evt);
            }
        });

        ModifyOrder.setText("ModifyOrder");
        ModifyOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyOrderActionPerformed(evt);
            }
        });

        CancelOrder.setText("CancelOrder");
        CancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelOrderActionPerformed(evt);
            }
        });

        Back.setText("Close");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        OrdersList.setModel(OrdersModel);
        jScrollPane4.setViewportView(OrdersList);

        jLabel4.setText("Orders in this table:");

        javax.swing.GroupLayout OrderPanelLayout = new javax.swing.GroupLayout(OrderPanel);
        OrderPanel.setLayout(OrderPanelLayout);
        OrderPanelLayout.setHorizontalGroup(
            OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OrderPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TableIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
            .addGroup(OrderPanelLayout.createSequentialGroup()
                .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(OrderPanelLayout.createSequentialGroup()
                            .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(OrderPanelLayout.createSequentialGroup()
                                    .addGap(207, 207, 207)
                                    .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(OrderPanelLayout.createSequentialGroup()
                                    .addGap(70, 70, 70)
                                    .addComponent(CreateOrder)))
                            .addGap(30, 30, 30)
                            .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(CancelOrder)
                                .addComponent(ModifyOrder))))
                    .addGroup(OrderPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(DisplayLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 107, Short.MAX_VALUE))
        );
        OrderPanelLayout.setVerticalGroup(
            OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TableIDLabel)
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OrderPanelLayout.createSequentialGroup()
                        .addGroup(OrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CreateOrder)
                            .addComponent(ModifyOrder))
                        .addGap(27, 27, 27)
                        .addComponent(CancelOrder))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(DisplayLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(Back)
                .addContainerGap())
        );

        SelectedTableTab.addTab("OrderTab", OrderPanel);

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 3, 18)); // NOI18N
        jLabel2.setText("Categories");

        Category1.setText("Category1");
        Category1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category1ActionPerformed(evt);
            }
        });

        Category2.setText("Category2");
        Category2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category2ActionPerformed(evt);
            }
        });

        Category3.setText("Category3");
        Category3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category3ActionPerformed(evt);
            }
        });

        Category4.setText("Category4");
        Category4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category4ActionPerformed(evt);
            }
        });

        Category5.setText("Category5");
        Category5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Category5ActionPerformed(evt);
            }
        });

        Back1.setText("Close");
        Back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back1ActionPerformed(evt);
            }
        });

        PlaceOrder.setVisible(false);
        PlaceOrder.setText("Place Order");
        PlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlaceOrderActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(AddedItems1);

        jLabel1.setText("Order Summary");

        Modify.setVisible(false);
        Modify.setText("Modify Order");
        Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyActionPerformed(evt);
            }
        });

        remove1.setText("Remove Item");
        remove1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MenuPanelLayout = new javax.swing.GroupLayout(MenuPanel);
        MenuPanel.setLayout(MenuPanelLayout);
        MenuPanelLayout.setHorizontalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuPanelLayout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jLabel2))
                    .addGroup(MenuPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Category1)
                        .addGap(18, 18, 18)
                        .addComponent(Category2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Category3)
                        .addGap(18, 18, 18)
                        .addComponent(Category4)
                        .addGap(18, 18, 18)
                        .addComponent(Category5)))
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, MenuPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(MenuPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MenuPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(remove1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DisplayLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Modify, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PlaceOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(Back1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );
        MenuPanelLayout.setVerticalGroup(
            MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MenuPanelLayout.createSequentialGroup()
                        .addGap(0, 121, Short.MAX_VALUE)
                        .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Category1)
                            .addComponent(Category2)
                            .addComponent(Category3)
                            .addComponent(Category4)
                            .addComponent(Category5))
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addGap(13, 13, 13)))
                .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(MenuPanelLayout.createSequentialGroup()
                            .addComponent(remove1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(DisplayLabel)
                            .addGap(60, 60, 60)
                            .addGroup(MenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(PlaceOrder)
                                .addComponent(Modify)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Back1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        SelectedTableTab.addTab("Menu", MenuPanel);
        MenuPanel.setVisible(false);

        ItemList.setToolTipText("");
        jScrollPane1.setViewportView(ItemList);

        jLabel3.setText("Selected Items:");

        add.setText("Add>>");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        remove.setText("<<Remove");
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        DefaultListModel<String> AddedListModel = new DefaultListModel();
        AddedItems.setModel(AddedListModel);
        jScrollPane2.setViewportView(AddedItems);

        AddItemstoOrder.setText("Done");
        AddItemstoOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemstoOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CategoryItemsLayout = new javax.swing.GroupLayout(CategoryItems);
        CategoryItems.setLayout(CategoryItemsLayout);
        CategoryItemsLayout.setHorizontalGroup(
            CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoryItemsLayout.createSequentialGroup()
                .addGroup(CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CategoryItemsLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(CategoryListLabel))
                    .addGroup(CategoryItemsLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remove)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CategoryItemsLayout.createSequentialGroup()
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))))
                .addGroup(CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AddItemstoOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CategoryItemsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addGap(0, 122, Short.MAX_VALUE))
        );
        CategoryItemsLayout.setVerticalGroup(
            CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CategoryItemsLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(CategoryListLabel))
                .addGap(18, 18, 18)
                .addGroup(CategoryItemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(CategoryItemsLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(add)
                        .addGap(18, 18, 18)
                        .addComponent(remove))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(AddItemstoOrder)
                .addGap(42, 42, 42))
        );

        SelectedTableTab.addTab("CategoryItems", CategoryItems);

        WaiterTabbedPane.addTab("TableTab", SelectedTableTab);
        SelectedTableTab.setVisible(false);
        SelectedTableTab.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Greeting)
                        .addGap(188, 188, 188)
                        .addComponent(Logout))
                    .addComponent(WaiterTabbedPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Greeting)
                    .addComponent(Logout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(WaiterTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        // TODO add your handling code here:
        new LoginGUI().setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_LogoutActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
       // TableOrderPanel.setVisible(false);
      // WaiterPanel.setVisible(true);
       //this.setVisible(false);
        DisplayLabel1.setText("");
       WaiterTabbedPane.remove(SelectedTableTab);
        

    }//GEN-LAST:event_BackActionPerformed

    private void ModifyOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyOrderActionPerformed
        // TODO add your handling code here:
        DisplayLabel1.setText("");
       // String[] selOrder=new String[10];
            AddedItemsModel.removeAllElements();
            System.out.println("order model size"+OrdersModel.size());
            String selOrder=OrdersList.getSelectedValue().toString();
            String[] newselOrder=selOrder.split(" ");
          
            orderid= Integer.parseInt(newselOrder[1]);
            order.setOrdID(orderid);
            String orderstatus=orderdb.check_order_status(orderid);
             if(orderstatus.equals("Processing"))
              {
            DisplayLabel1.setText("Order cannot be Modified! Order is being processed by Kitchen staff");
             }
        else if(orderstatus.equals("ready"))
                {
           DisplayLabel1.setText("Order cannot be Modified! Order is ready to be served");
                 }
         else if(orderstatus.equals("InQueue"))
        {    Modify.setVisible(true);
             MenuPanel.setVisible(true);
             SelectedTableTab.add("Menu",MenuPanel);
             SelectedTableTab.setSelectedComponent(MenuPanel);
             ArrayList<String> category = Cg.get_menu();
             String[] orderitems=orderdb.getOrderItems(orderid);
             for(int i=0;i<orderitems.length;i++)
             {
               AddedItemsModel.addElement( orderitems[i]);
                     
               }
             AddedItems1.setModel(AddedItemsModel);
             Category1.setText(category.get(0));
        Category2.setText(category.get(1));
        Category3.setText(category.get(2));
        Category4.setText(category.get(3));
        Category5.setText(category.get(4));

        }  
        
        
        
     
        
       
        
    }//GEN-LAST:event_ModifyOrderActionPerformed

    private void CreateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateOrderActionPerformed
        // TODO add your handling code here:
         
        DisplayLabel1.setText("");         
        order=Cg.create_order_request(WaiterID, TableID);
        ArrayList<String> category = Cg.get_menu();
        System.out.println("Waiter "+WaiterID+" Table "+TableID);
        SelectedTableTab.addTab("Menu", MenuPanel);
        Category1.setText(category.get(0));
        Category2.setText(category.get(1));
        Category3.setText(category.get(2));
        Category4.setText(category.get(3));
        Category5.setText(category.get(4));
        SelectedTableTab.setSelectedComponent(MenuPanel);
        PlaceOrder.setVisible(true);
        AddedItemsModel.removeAllElements();
//        
//        else
//        {
//            DispLabel.setText("Already Ordered!Click modfy order to modify current order!");
//            DispLabel.setForeground(Color.red);
//        }
        //System.out.println("Categories"+category.get(1));
    }//GEN-LAST:event_CreateOrderActionPerformed

    private void Back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back1ActionPerformed
        // TODO add your handling code here:
         SelectedTableTab.remove(MenuPanel);
         DisplayLabel.setText("");
         Modify.setVisible(false);
         PlaceOrder.setVisible(false);
    }//GEN-LAST:event_Back1ActionPerformed

    private void Category1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category1ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> categoryItemList= Cg.selectCategory(Category1.getText());
        CategoryListLabel.setText(Category1.getText());
        CategoryItems.setName(Category1.getText());
    
        for(int i=0;i<categoryItemList.size();i++)
        {
            DefaultListModel<String> model = new DefaultListModel();
            for(String s:categoryItemList)
            {
                model.addElement(s);
                }
        ItemList.setModel(model);
        
       // ItemList= JList(categoryItemList.toArray());
          }
       SelectedTableTab.remove(MenuPanel);
       SelectedTableTab.add(CategoryItems);
       SelectedTableTab.setSelectedComponent(CategoryItems);
   }//GEN-LAST:event_Category1ActionPerformed

    private void Category2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category2ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> categoryItemList= Cg.selectCategory(Category2.getText());
        CategoryItems.setName(Category2.getText());
        CategoryListLabel.setText(Category2.getText());
         for(int i=0;i<categoryItemList.size();i++)
        {
            DefaultListModel<String> model = new DefaultListModel<String>();
            for(String s:categoryItemList)
            {
                model.addElement(s);
                }
        
        ItemList.setModel(model);
        }
       SelectedTableTab.remove(MenuPanel);
       SelectedTableTab.add(CategoryItems);
       SelectedTableTab.setSelectedComponent(CategoryItems);
    }//GEN-LAST:event_Category2ActionPerformed

    private void Category3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category3ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> categoryItemList= Cg.selectCategory(Category3.getText());
        CategoryItems.setName(Category3.getText());
        CategoryListLabel.setText(Category3.getText());
         for(int i=0;i<categoryItemList.size();i++)
        {
            DefaultListModel<String> model = new DefaultListModel<String>();
            for(String s:categoryItemList)
            {
                model.addElement(s);
                }
        
        ItemList.setModel(model);
        }
       SelectedTableTab.remove(MenuPanel);
       SelectedTableTab.add(CategoryItems);
       SelectedTableTab.setSelectedComponent(CategoryItems);
    }//GEN-LAST:event_Category3ActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
                   
        List<String> ItemSel = ItemList.getSelectedValuesList(); // 2
        for(int i=0;i<ItemSel.size();i++)
        {
            AddedItemsModel.addElement(ItemSel.get(i));
        }
         String[] AddedItemsList=new String[AddedItemsModel.getSize()];
        
        for(int i =0;i<AddedItemsModel.getSize();i++)
        {
            
            AddedItemsList[i]=AddedItemsModel.get(i);
            System.out.println("AddedItemsList Contents:"+AddedItemsList[i]);
        }
        
        order=Cg.add_items_request(order,AddedItemsList);
    }//GEN-LAST:event_addActionPerformed

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionPerformed
        // TODO add your handling code here:
        int[] ItemSel = AddedItems.getSelectedIndices();
        for(int i=0;i<ItemSel.length;i++)
        {
            AddedItemsModel.remove(ItemSel[i]);
            System.out.println(ItemSel[i]+"Removed!");
//             for(i =0;i<AddedItemsModel.getSize();i++)
//         {
//             System.out.println("AddedItemsModel Content "+AddedItemsModel.get(i));
//         }    
        }
         String[] AddedItemsList=new String[AddedItemsModel.getSize()];
//         for(int i =0;i<AddedItemsModel.getSize();i++)
//         {
//             System.out.println("AddedItemsModel Content before storing in List"+AddedItemsModel.get(i));
//         }
        for(int i =0;i<AddedItemsModel.getSize();i++)
        {
            
            AddedItemsList[i]=AddedItemsModel.get(i);
            System.out.println("AddedItemsList Contents:"+AddedItemsList[i]);
        }
        
        Cg.add_items_request(order,AddedItemsList);
    }//GEN-LAST:event_removeActionPerformed

    private void AddItemstoOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemstoOrderActionPerformed
        // TODO add your handling code here:
//        String[] AddedItemsList=new String[AddedItemsModel.getSize()];
//         for(int i =0;i<AddedItemsModel.getSize();i++)
//         {
//             System.out.println("AddedItemsModel Content before storing in List"+AddedItemsModel.get(i));
//         }
//        for(int i =0;i<AddedItemsModel.getSize();i++)
//        {
//            
//            AddedItemsList[i]=AddedItemsModel.get(i);
//            System.out.println("AddedItemsList Contents:"+AddedItemsList[i]);
//        }
//        Cg.add_items_request(AddedItemsList);
        AddedItems1.setModel(AddedItemsModel);
        SelectedTableTab.remove(CategoryItems);
        SelectedTableTab.addTab("Menu", MenuPanel);
        SelectedTableTab.setSelectedComponent(MenuPanel);
       
    }//GEN-LAST:event_AddItemstoOrderActionPerformed

    private void Category4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category4ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> categoryItemList= Cg.selectCategory(Category4.getText());
        CategoryItems.setName(Category4.getText());
        CategoryListLabel.setText(Category4.getText());
         for(int i=0;i<categoryItemList.size();i++)
        {
            DefaultListModel<String> model = new DefaultListModel<String>();
            for(String s:categoryItemList)
            {
                model.addElement(s);
                }
        
        ItemList.setModel(model);
        }
       SelectedTableTab.remove(MenuPanel);
       SelectedTableTab.add(CategoryItems);
       SelectedTableTab.setSelectedComponent(CategoryItems);
    }//GEN-LAST:event_Category4ActionPerformed

    private void Category5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Category5ActionPerformed
        // TODO add your handling code here:
        ArrayList<String> categoryItemList= Cg.selectCategory(Category5.getText());
        CategoryItems.setName(Category5.getText());
        CategoryListLabel.setText(Category5.getText());
         for(int i=0;i<categoryItemList.size();i++)
        {
            DefaultListModel<String> model = new DefaultListModel<String>();
            for(String s:categoryItemList)
            {
                model.addElement(s);
                }
        
        ItemList.setModel(model);
        }
       SelectedTableTab.remove(MenuPanel);
       SelectedTableTab.add(CategoryItems);
       SelectedTableTab.setSelectedComponent(CategoryItems);
    }//GEN-LAST:event_Category5ActionPerformed

    private void PlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlaceOrderActionPerformed
        // TODO add your handling code here:
        
        if(AddedItemsModel.isEmpty())
        {   DisplayLabel.setForeground(Color.red);
            DisplayLabel.setText("Order is empty! Please add items to order!");
        }
        else if(!AddedItemsModel.isEmpty())
                {   DisplayLabel.setText("");
                    ConfirmOrder.setVisible(true);
                  }
    }//GEN-LAST:event_PlaceOrderActionPerformed

    private void YesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YesActionPerformed
        // TODO add your handling code here:
        Cg.orderConfirmed(order);
        ConfirmOrder.setVisible(false);
        OrdersModel.removeAllElements();
        getOrderofTable();  
            
    }//GEN-LAST:event_YesActionPerformed

    private void NoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoActionPerformed
        // TODO add your handling code here:
        ConfirmOrder.setVisible(false);
    }//GEN-LAST:event_NoActionPerformed

    private void CancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelOrderActionPerformed
        // TODO add your handling code here:
        DisplayLabel1.setText("");
        String selOrder=OrdersList.getSelectedValue().toString();
        String[] newselOrder=selOrder.split(" ");
        int orderid= Integer.parseInt(newselOrder[1]);
        String orderstatus=orderdb.check_order_status(orderid);
        
        if(orderstatus.equals("Processing"))
        {
            DisplayLabel1.setText("Order cannot be removed! Order is being processed by Kitchen staff");
        }
        else if(orderstatus.equals("ready"))
        {
           DisplayLabel1.setText("Order cannot be removed! Order is ready to be served");
        }
        else if(orderstatus.equals("InQueue"))
        {
            
           orderdb.remove_order(orderid);
           
           OrdersModel.removeAllElements();

           getOrderofTable();
        }
        
        
    }//GEN-LAST:event_CancelOrderActionPerformed

    private void ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyActionPerformed
        // TODO add your handling code here:
        if(AddedItemsModel.isEmpty())
        {   DisplayLabel.setForeground(Color.red);
            DisplayLabel.setText("Order is empty! Please add items to order!");
        }
        else if(!AddedItemsModel.isEmpty())
                {   DisplayLabel.setText("");
                    UpdateOrder.setVisible(true);
                  }
    }//GEN-LAST:event_ModifyActionPerformed

    private void ModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModActionPerformed
        // TODO add your handling code here:
        System.out.println("Mod clicked");
        Cg.updateOrder(order);
        UpdateOrder.setVisible(false);
        OrdersModel.removeAllElements();
        getOrderofTable(); 
    }//GEN-LAST:event_ModActionPerformed

    private void NoModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoModActionPerformed
        // TODO add your handling code here:
        UpdateOrder.setVisible(false);
    }//GEN-LAST:event_NoModActionPerformed

    private void remove1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove1ActionPerformed
        // TODO add your handling code here:
          int[] ItemSel = AddedItems1.getSelectedIndices();
        for(int i=0;i<ItemSel.length;i++)
        {
            AddedItemsModel.remove(ItemSel[i]);
            System.out.println(ItemSel[i]+"Removed!");
//             for(i =0;i<AddedItemsModel.getSize();i++)
//         {
//             System.out.println("AddedItemsModel Content "+AddedItemsModel.get(i));
//         }    
        }
         String[] AddedItemsList=new String[AddedItemsModel.getSize()];
//         for(int i =0;i<AddedItemsModel.getSize();i++)
//         {
//             System.out.println("AddedItemsModel Content before storing in List"+AddedItemsModel.get(i));
//         }
        for(int i =0;i<AddedItemsModel.getSize();i++)
        {
            
            AddedItemsList[i]=AddedItemsModel.get(i);
            System.out.println("AddedItemsList Contents:"+AddedItemsList[i]);
        }
        
        Cg.add_items_request(order,AddedItemsList);
    }//GEN-LAST:event_remove1ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /*
//         * Set the Nimbus look and feel
//         */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /*
//         * If Nimbus (introduced in Java SE 6) is not available, stay with the
//         * default look and feel. For details see
//         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(WaiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(WaiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(WaiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(WaiterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /*
//         * Create and display the form
//         */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                new WaiterGUI().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItemstoOrder;
    private javax.swing.JList AddedItems;
    private javax.swing.JList AddedItems1;
    private javax.swing.JButton Back;
    private javax.swing.JButton Back1;
    private javax.swing.JButton CancelOrder;
    private javax.swing.JButton Category1;
    private javax.swing.JButton Category2;
    private javax.swing.JButton Category3;
    private javax.swing.JButton Category4;
    private javax.swing.JButton Category5;
    private javax.swing.JPanel CategoryItems;
    private javax.swing.JLabel CategoryListLabel;
    private javax.swing.JFrame ConfirmOrder;
    private javax.swing.JButton CreateOrder;
    private javax.swing.JLabel DisplayLabel;
    private javax.swing.JLabel DisplayLabel1;
    private javax.swing.JFrame Error;
    private javax.swing.JLabel Greeting;
    private javax.swing.JList ItemList;
    private javax.swing.JButton Logout;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JButton Mod;
    private javax.swing.JButton Modify;
    private javax.swing.JButton ModifyOrder;
    private javax.swing.JButton No;
    private javax.swing.JButton NoMod;
    private javax.swing.JPanel OrderPanel;
    private javax.swing.JList OrdersList;
    private javax.swing.JButton PlaceOrder;
    private javax.swing.JTabbedPane SelectedTableTab;
    private javax.swing.JLabel TableIDLabel;
    private javax.swing.JFrame UpdateOrder;
    private javax.swing.JPanel WaiterPanel;
    private javax.swing.JTabbedPane WaiterTabbedPane;
    private javax.swing.JButton Yes;
    private javax.swing.JButton add;
    private javax.swing.JButton changeButton;
    private javax.swing.JLabel confirmOrder;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton remove;
    private javax.swing.JButton remove1;
    // End of variables declaration//GEN-END:variables
}
